'use strict';

//---!! Метод foreach никогда не возвоащает нам новый массив. Он просто перебирает каждый элемент и выполняет какое то действие над этим отдельным элемнетом !!---

// //---!! filter  - фильтрует элементы массива !---
// //---!! формирует новый массив !!---

// const names = ['Ivan', 'Ann', 'Ksenia', 'Voldemart']; //создаем массив

// //Задача - получить иамена, которые меньше, чем 5 символов

// const shortNames = names.filter(function(name) { //фильтруем наш главный массив и формируем новый
//     return name.length < 5; //возвращаем, обязательно возвращаем те айтемы которые длиной менее 5 букв
// });

// console.log(shortNames);

//---!! map - паозволяет взять некий массив и изменить каждый элемент в нем !!---
//---!! на выходе получаем опять же новый массив

// const answers = ['IvAn', 'AnnA', 'Hello'];

// const result = answers.map(item =>  item.toLowerCase()); //сокращенный вид колбэк функции(тогда не надо писать слово return оно по умолчанию)
// //задаем метод map() и просим каждый элемент массива привести к прописному начертанию

//--!! Можем переназначить элементы в текущем массиве, не создавая новый НО ЛУЯШЕ ТАК НЕК ДЕЛАТЬ    !!---

// let answers = ['IvAn', 'AnnA', 'Hello'];

// answers = answers.map(item =>  item.toLowerCase());

// console.log(answers);

//---!! every(вернет true если все элементы массива подходят под условие)/some(вернет true, если хоть один элемент соответствует условию) !!---

// const some =  [4, 'qwq', 'sfreferf'];

// console.log(some.some(item => typeof(item) === 'number')); //нам надо проверить есть ли в массиве хоть одно число
// //задаем метод перебора some и пишем колбек функцию, которая проверяет есть ли в массиве хоть одно число - вернет булевый ответ(true или false)
// console.log(some.every(item => typeof(item) === 'number'));

//---!! reduce - схлопывает или собирает в единое целое массив !!---

// //

//Задача - получить сумму всех этих элементов

// const result = arr.reduce((sum, current) => {//создаем новую переменную
//     // записываем в нее наш начальный массив с методом reduce
//     //колбэк функция принимает в себя два аргумента
//     //1й - сумма всех наших аргументов(изначально = 0)
//     //2й - непосредственно тот элемент, который приходит от массива
//     return sum + current; //возвращаем сумму двух аргументов
// });  //весь массив схлопывается в одну перменную

// console.log(result);

// const arr = ['apple', 'pear', 'plum'];

// //задача получить одну строку с перечисленнием этих всех фруктов через запятую

// const result = arr.reduce((sum, current) => {
//     return `${sum}, ${current}`; 
// }, 'orange');  //можем задать 3й аргумент, он будет подставляться как дефолтное значение для первого элемента

// console.log(result);

//---!! Практика !!---

const obj = { //создаем объект
    ivan: 'persone',
    ann: 'persone',
    dog: 'animal',
    cat: 'animal',
};

//Задача - вытащить имена, которые находятся в этом объекте


//1 - создаем из объекта массив

let newArr = Object.entries(obj); //создаем переменную для нового массива
//обращаемся к глобальному объекту Object и его методу entries(), как аргумент передаем наш объект
//как результат получим массив массивов 
/*
    [
        [ 'ivan', 'persone' ],
        [ 'ann', 'persone' ],
        [ 'dog', 'animal' ],
        [ 'cat', 'animal' ]
    ]
*/

//2 отфильтровываем те подмасивы, которые содержат 'persone'

newArr = newArr.filter((item) => { //отфильтровываем массив, задаем айтем - это каждый подмассив и говорим
    return item[1] === 'persone'; //что возвращаекм только тот айтем. внутри которого 2й элемент равен персон
});


/* Получаем вот такой массив
    [ [ 'ivan', 'persone' ], [ 'ann', 'persone' ] ]
*/

//3 Теперь трансформируем наш массив, чтобы оставить только имена

newArr = newArr.map((item) => { //обращаемся к каждому подмассиву
    return item[0]; //и говорим, что возвращаем только 1й элемент
});

/** Получим
 * [ 'ivan', 'ann' ]
 */


//Короткая запись задачки выше

// const newArr = Object.entries(obj)
// .filter(item => item[1] === 'persone')
// .map(item =>  item[0]);

console.log(newArr);


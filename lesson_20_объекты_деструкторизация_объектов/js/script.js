"use strict";  // используется для обозначения того, что код пишем в новом формате, пишев в верху главного документа


// const obj = new Object();   //создаем новый объект, способ 1

const options = {    // создаем новый объект, способ 2 и он лучше  -> const obj = {};
    name: 'test',   //создаем ключ и его значение, в данном случае строка
    width: 1024,  // значение число
    height: 1024, // значение число
    color: {     // значение объект
        border: 'black',  // значение строка
        bg: 'red'    // значение строка
    },
    makeTest: function() {   //создаем метод, который будет работать внутри объекта options
        console.log('Test');
    }

};

// console.log(options.name);  // выводим значение ключа name объекта options
//
// delete options.name; //удаляем свойство name у объекта options
//
// console.log(options); //выводим все свойства объекта options (name отсутствует, так как мы его удалили)

// for (let key in options) { // создаем цикл для перебора ВСЕХ свойств объекта options, где key - это ключи объекта
//     console.log(`Свойство ${key} имеет значение ${options[key]}`);  // выводим в консоль фразу, используя интерполяцию, где ${key} - название свойства объекта, а ${options[key]} - это значение заданного свойства
// }
//Если необходимо, чтобы перебрали не только свойства первого уровня, но и свойства и значения, которое в форме объекта, то делаем внутри перебора проверку на объекты и делаем отдельный для него перебор

// let counter = 0; //переменная, которая будет счетчиком, считать сколько кругов пройдет цикл
//
// for (let key in options) {
//     if (typeof(options[key]) === 'object') { //создаем условие, если значение ключа имеет тип - объект
//         for (let  i in options[key]) {  //то создаем для него перебор, где i - это ключи внутреннего объекта, а options[key] это свойство родительского объекта
//             console.log(`Свойство ${i} имеет значение ${options[key][i]}`); //выводим сообщение используя интерполяцию, где i - это ключ внутреннего объекта, а  options[key][i] - это значение ключа внутреннего объекта
//             counter++; //прибавляем 1 при завершении круга
//         }
//     } else {
//         console.log(`Свойство ${key} имеет значение ${options[key]}`);
//         counter++; //прибавляем 1 при завершении круга
//     }
// }

// console.log(counter); //выводим значение переменной, чтобы посмотреть сколько свойств в нашем объекте на всех уровнях
//
// for (let key in options) {
//     counter++;
// }
//
// console.log(counter); //выведет количество свойств объекта только на первом уровне

// options.makeTest(); //запускаем метод объекта options
// console.log(Object.keys(options));  //выводит массив с именами всех ключей первого уровня данного объекта
// console.log(Object.keys(options).length); //выведет длину массива имен ключей объекта

const {border, bg} = options.color; // деструктуризация, где {border, bg} - свойства которые мы хотим достать, а options.colors- откуда мы их хотим достать

console.log(border);
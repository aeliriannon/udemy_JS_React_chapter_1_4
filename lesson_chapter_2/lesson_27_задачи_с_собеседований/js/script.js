"use strict";  // используется для обозначения того, что код пишем в новом формате, пишев в верху главного документа


// //1
// let x = 5;

// console.log(x++); //выведет 6 -

// //2
// console.log([] + false - null + true); //true или 2 -

// console.log(typeof([] + false)); 
//'false' - так как пустой массив приводится к строке, а  ( строка + что-то = строка )(конкатенация)
// console.log('false' - null);  // NaN - (строка - что-то = NaN) строка, которая не приведется в число
// console.log(NaN + true);  // NaN 

// //3

// let y = 1;
// let x = y = 2;  // сначала y присвоит 2, потом x присвоит y --> получается x = 2

// console.log(x); // 1 -

// //4

// console.log([ ] + 1 + 2);  // 4 - 

//'12'  - посакольку пустой массив приводится к пустой строке, то произойдет конкатенация и получится строка '12'
// console.log('' + 1 + 2); 
// //5!

// console.log('1'[0]);   // 1 +  (строка которая имеет цифру 1 а 0 указывает на нулевой индекс, то есть на нашу 1)

// //6

// console.log(2 && 1 && null && 0 && undefined);  //false -
// //оператор И - запинается на лжи и выводит ПЕРВОЕ встретившееся (слева направо) ложное значение. 
// //В данном примере null

// //7 есть ли разница - !!( a && b ) и (a && b)?  --- НЕТ  -
// let a;
// let b;
// console.log(!!(a && b) === (a && b));
// // !! - превращает любое выражение следующее за ним в boolean
// // а значит true !=== (a && b) - тру не равно выражению(строгая типизация)

// //8

// console.log(null || 2 && 3 || 4);  // true -

// // ИЛИ запинается на правде, выводит первое правдивое значение
// // 2 и 3 - оба правдивы, поэтому берем последнее --> 3 
// // null или 3 --> поскольку нул - ложь, идем дальше, 3--> правда - выводим 3


// //9

// const a = [1, 2, 3]; 
// const b = [1, 2, 3];

// console.log(a==b); //да - 
// // массивы это два хранилища, которые имеют похожие данные, но хранилища совершенно разные
// //если сравнивать отдельно элементы массивов, то они конечно будут равны, но сами хранилища нет

// //10

// console.log(+'Infinity'); 
// NaN - Infinity является числом , поэтому строка инфинити преобразуется в число --> Infinity

// //11 

// console.log('Ёжик' > 'яблоко'); 
// да -  порядок сравнения букв зависит от таблицы символов юникод, чем больше ее кодировка тем больше буква

// //12

// console.log(0 || '' || 2 || undefined || true || falsе); //  true -  
// выведет 2, так как это первое правдивое значение



{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,IAAI;;;;;;;;;;;;;;AC5HnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8FAA8F,SAAS,SAAS,SAAS,oCAAoC,WAAW,sCAAsC,iBAAiB,4JAA4J,UAAU;AACrY;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,wEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,mCAAmC;AACnC;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA,sBAAsB;AACtB,8DAA8D;AAC9D;AACA;AACA;AACA,mCAAmC,SAAS,SAAS,SAAS;AAC9D,yDAAyD,WAAW;AACpE;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,iEAAiE,WAAW;AAC5E;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,wBAAwB;AACxB,oFAAoF;AACpF;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA,mCAAmC;AACnC,mCAAmC;AACnC;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA,sBAAsB;AACtB,8DAA8D;AAC9D;AACA,gDAAgD;AAChD;AACA,gDAAgD;AAChD,wDAAwD;AACxD;AACA,iBAAiB;AACjB,wFAAwF;AACxF;AACA;AACA;AACA;AACA,+BAA+B,SAAS,SAAS,SAAS;AAC1D,qDAAqD,WAAW;AAChE;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,6DAA6D,WAAW;AACxE;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C,uCAAuC;AACvC;AACA,0BAA0B;AAC1B,kDAAkD,IAAI,YAAY,WAAW;AAC7E;AACA,oCAAoC;AACpC;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mGAAmG;AACnG;AACA;AACA,mBAAmB;AACnB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,4FAA4F;AAC5F;AACA;AACA,YAAY;AACZ,QAAQ;AACR;AACA,mCAAmC;AACnC,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,8DAA8D;AAC9D,oDAAoD;AACpD;AACA;AACA,+BAA+B,IAAI,SAAS,OAAO;AACnD,qDAAqD,MAAM;AAC3D;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,6DAA6D,MAAM;AACnE;AACA;AACA;AACA,2EAA2E;AAC3E,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,iEAAe,KAAK;;;;;;;;;;;;;;;;AC9PH,CAAC;AAGY;AAC9B;AACA;AACA;AACA;AACA,0DAA0D;AAC1D,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,4BAA4B;AAC5B;AACA,KAAK;AACL;AACA;AACA;AACA,kCAAkC;AAClC,iDAAiD;AACjD;AACA,gCAAgC;AAChC;AACA,iEAAiE;AACjE,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA,mEAAmE;AACnE;AACA;AACA;AACA;AACA,qDAAqD;AACrD,mDAAmD;AACnD,6EAA6E;AAC7E;AACA;AACA,iDAAiD;AACjD;AACA;AACA,kCAAkC;AAClC;AACA,wDAAwD;AACxD,wCAAwC;AACxC,gBAAgB;AAChB;AACA,iFAAiF;AACjF;AACA;AACA,oDAAoD;AACpD;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA,YAAY,4DAAQ;AACpB,gCAAgC;AAChC,uCAAuC;AACvC,sDAAsD;AACtD,4CAA4C;AAC5C,iBAAiB;AACjB,+BAA+B;AAC/B;AACA;AACA,sDAAsD;AACtD,iBAAiB;AACjB,iCAAiC;AACjC,kCAAkC;AAClC,iBAAiB;AACjB;AACA,wDAAwD;AACxD,iDAAiD;AACjD,sDAAsD;AACtD,yDAAyD;AACzD,qCAAqC;AACrC,+CAA+C;AAC/C,qBAAqB;AACrB,yDAAyD;AACzD;AACA,gBAAgB;AAChB,SAAS;AACT;AACA;AACA;AACA;AACA,wCAAwC;AACxC,0EAA0E;AAC1E;AACA,+CAA+C;AAC/C,QAAQ,iDAAS,0BAA0B;AAC3C;AACA,2DAA2D;AAC3D,oDAAoD;AACpD;AACA;AACA;AACA,gEAAgE;AAChE,gDAAgD,QAAQ;AACxD;AACA;AACA;AACA;AACA,8DAA8D;AAC9D,2BAA2B;AAC3B,kCAAkC;AAClC,mDAAmD;AACnD,sDAAsD;AACtD,YAAY,kDAAU,YAAY;AAClC,SAAS,SAAS;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,KAAK,EAAC;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA,6BAA6B,aAAa;AAC1C,kBAAkB;AAClB;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;;;;;;;;;;;;;;;;AC7K7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,kDAAkD;AAClD,2DAA2D;AAC3D,qDAAqD;AACrD,YAAY;AACZ,QAAQ;AACR,kDAAkD;AAClD,+CAA+C;AAC/C,yDAAyD;AACzD,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA,kCAAkC;AAClC;AACA,4CAA4C;AAC5C,+CAA+C;AAC/C,wDAAwD;AACxD;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,sDAAsD;AACtD,uCAAuC;AACvC,0CAA0C;AAC1C,8CAA8C;AAC9C;AACA,QAAQ;AACR;AACA,4DAA4D;AAC5D;AACA,mDAAmD;AACnD,+EAA+E;AAC/E;AACA,2CAA2C;AAC3C,8CAA8C;AAC9C,kDAAkD;AAClD,uCAAuC;AACvC;AACA,KAAK;AACL;AACA,kDAAkD;AAClD,uEAAuE;AACvE;AACA,uCAAuC;AACvC;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA,iEAAe,KAAK,EAAC,CAAC;AAGpB;AAGA,CAAC;;;;;;;;;;;;;;AC/GH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,IAAI;AAC9D,yBAAyB;AACzB,yDAAyD,IAAI;AAC7D;AACA,qBAAqB;AACrB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,WAAW;AAC9C,aAAa;AACb,kCAAkC,WAAW;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,QAAQ;AAClE,yBAAyB;AACzB,yDAAyD,QAAQ;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,QAAQ;AAC9D,qBAAqB;AACrB,qDAAqD,QAAQ;AAC7D;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,cAAc;AAC9C,kCAAkC,WAAW;AAC7C,MAAM;AACN;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA,wCAAwC;AACxC,+CAA+C;AAC/C;AACA,6CAA6C;AAC7C;AACA,8BAA8B;AAC9B,mCAAmC;AACnC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA,sEAAsE;AACtE;AACA;AACA;AACA,wBAAwB;AACxB,UAAU,OAAO;AACjB,8CAA8C;AAC9C;AACA;AACA,qDAAqD,OAAO;AAC5D;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,sCAAsC,WAAW;AACjD,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,2CAA2C;AAC3C;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,qDAAqD,OAAO;AAC5D;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,sCAAsC,WAAW;AACjD,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,OAAO;AAChE;AACA;AACA;AACA,0CAA0C,WAAW;AACrD,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,iEAAe,MAAM;;;;;;;;;;;;;;ACpRrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA,sCAAsC;AACtC,4CAA4C;AAC5C;AACA;AACA,SAAS;AACT;AACA,+BAA+B;AAC/B,gDAAgD;AAChD,SAAS;AACT;AACA;AACA;AACA;AACA,qCAAqC;AACrC,mDAAmD;AACnD;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD,qCAAqC;AACrC;AACA,0EAA0E;AAC1E,wCAAwC;AACxC,sCAAsC;AACtC;AACA,uCAAuC;AACvC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,iEAAe,IAAI;;;;;;;;;;;;;;ACzDnB;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,oCAAoC;AACpC,uBAAuB,IAAI,GAAG;AAC9B,UAAU;AACV,wBAAwB;AACxB;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA,uBAAuB;AACvB;AACA,iCAAiC;AACjC,iDAAiD;AACjD;AACA,8CAA8C;AAC9C,gDAAgD;AAChD,oDAAoD;AACpD,oDAAoD;AACpD;AACA,gCAAgC;AAChC,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,KAAK;;;;;;;;;;;;;;AC5DpB,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,SAAS;AACT;AACA,KAAK,GAAG;AACR;AACA,6BAA6B;AAC7B;AACA;;;;;;;UCdA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;ACNa;AACqB;AACA;AACE;AACA;AACA;AACE;AACF;AACI;AACxC;AACA,oDAAoD;AACpD;AACA,0CAA0C,0DAAS,kCAAkC;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,yDAAI;AACR,IAAI,yDAAI;AACR,IAAI,0DAAK;AACT,IAAI,0DAAK;AACT,IAAI,0DAAK;AACT,IAAI,2DAAM;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,IAAI,0DAAK;AACT;AACA,CAAC,E","sources":["webpack://food/./js/modules/calc.js","webpack://food/./js/modules/cards.js","webpack://food/./js/modules/forms.js","webpack://food/./js/modules/modal.js","webpack://food/./js/modules/slider.js","webpack://food/./js/modules/tabs.js","webpack://food/./js/modules/timer.js","webpack://food/./js/services/services.js","webpack://food/webpack/bootstrap","webpack://food/webpack/runtime/define property getters","webpack://food/webpack/runtime/hasOwnProperty shorthand","webpack://food/webpack/runtime/make namespace object","webpack://food/./js/main.js"],"sourcesContent":["function calc() {\r\n    //=== Calc ===\r\n\r\n    const result = document.querySelector('.calculating__result span');\r\n\r\n    let sex, height, weight, age, ratio;\r\n\r\n    if (localStorage.getItem('sex')) {\r\n        sex = localStorage.getItem('sex');\r\n    } else {\r\n        sex = 'female';\r\n        localStorage.setItem('sex', 'female');\r\n    }\r\n\r\n    if (localStorage.getItem('ratio')) {\r\n        ratio = localStorage.getItem('ratio');\r\n    } else {\r\n        ratio = 1.375;\r\n        localStorage.setItem('ratio', 1.375);\r\n    }\r\n\r\n\r\n    function initlocalSettings(selector, activeClass) {\r\n        const elements = document.querySelectorAll(selector);\r\n\r\n        elements.forEach(elem => {\r\n            elem.classList.remove(activeClass);\r\n            if (elem.getAttribute('id') === localStorage.getItem('sex')) {\r\n                elem.classList.add(activeClass);\r\n            }\r\n            if (elem.getAttribute('data-ratio') === localStorage.getItem('ratio')) {\r\n                elem.classList.add(activeClass);\r\n            }\r\n        });\r\n    }\r\n\r\n    initlocalSettings('#gender div', 'calculating__choose-item_active');\r\n    initlocalSettings('.calculating__choose_big div', 'calculating__choose-item_active');\r\n\r\n    function calcTotal() { //будет выполнятся каждый раз при изменении какого либо параметра\r\n        //делаем проверку заплнены ли все данные, если хоть что-то не заполнено, то подсчеты не делаются\r\n        if (!sex || !height || !weight || !age || !ratio) {\r\n            result.textContent = '____';\r\n            // если хоть какй то параметр отсутствует, вставляем текст 4псевдопробела\r\n            return; //и прирываем функцию\r\n        }\r\n\r\n        //считаем коллории для женщин\r\n        if (sex === 'female') {\r\n            result.textContent = Math.round((447.6 + (9.2 * weight) + (3.1 * height) - (4.3 * age)) * ratio);\r\n        } else {\r\n            result.textContent = Math.round((88.36 + (13.4 * weight) + (4.8 * height) - (5.7 * age)) * ratio);\r\n        }\r\n\r\n    }\r\n\r\n    calcTotal();\r\n\r\n    function getStaticInformation(selector, activeClass) {\r\n        //получаем информацию со статичных блоков\r\n        const elements = document.querySelectorAll(selector);\r\n        //получаю все дивы внутри введенного родителя\r\n\r\n        elements.forEach(elem => {\r\n            elem.addEventListener('click', (e) => {\r\n                //если объект события содержит атрибут data-ratio, то изменяем ratio, иначе получаем id\r\n                if (e.target.getAttribute('data-ratio')) {\r\n                    ratio = +e.target.getAttribute('data-ratio');\r\n                    localStorage.setItem('ratio', +e.target.getAttribute('data-ratio'));\r\n                } else {\r\n                    sex = e.target.getAttribute('id');\r\n                    localStorage.setItem('sex', e.target.getAttribute('id'));\r\n                }\r\n\r\n                //сбрасываем класс активности у элементов и задем тот. на который кликнули\r\n                elements.forEach(elem => {\r\n                    elem.classList.remove(activeClass);\r\n                });\r\n\r\n                e.target.classList.add(activeClass);\r\n\r\n                calcTotal();\r\n            });\r\n        });\r\n\r\n    }\r\n\r\n    getStaticInformation('#gender div', 'calculating__choose-item_active');\r\n    getStaticInformation('.calculating__choose_big div', 'calculating__choose-item_active');\r\n\r\n    function getDynamicInformation(selector) {\r\n        const input = document.querySelector(selector);\r\n\r\n        input.addEventListener('input', () => {\r\n            if (input.value.match(/\\D/g)) {\r\n                input.style.border = '1px solid red';\r\n            } else {\r\n                input.style.border = 'none';\r\n            }\r\n\r\n            switch (input.getAttribute('id')) {\r\n                case 'height':\r\n                    height = +input.value;\r\n                    break;\r\n                case 'weight':\r\n                    weight = +input.value;\r\n                    break;\r\n                case 'age':\r\n                    age = +input.value;\r\n                    break;\r\n            }\r\n\r\n            calcTotal();\r\n        });\r\n\r\n\r\n    }\r\n\r\n    getDynamicInformation('#height');\r\n    getDynamicInformation('#weight');\r\n    getDynamicInformation('#age');\r\n}\r\n\r\n// module.exports = calc;\r\nexport default calc;","function cards() {\r\n    //--- Карточки рецептов ---\r\n\r\n    //--- мое решение -- создание класса для карточки меню ---\r\n\r\n    // const menuItem = document.querySelector('.menu__field .container');\r\n\r\n    // class MenuItemCard {\r\n    //     constructor(src, title, description, cost, alt) {\r\n    //         this.src = src;\r\n    //         this.alt = alt;\r\n    //         this.title = title;\r\n    //         this.description = description;\r\n    //         this.cost = cost;\r\n    //     }\r\n\r\n    //     addedImage() {\r\n    //         menuItem.insertAdjacentHTML('beforeend', `<div class=\"menu__item\"> <img src=\"${this.src}\" alt=\"${this.src}\"><h3 class=\"menu__item-subtitle\">${this.title}</h3> <div class=\"menu__item-descr\">${this.description}</div> <div class=\"menu__item-divider\"></div> <div class=\"menu__item-price\"> <div class=\"menu__item-cost\">Цена:</div> <div class=\"menu__item-total\"><span>${this.cost}</span> грн/день</div> </div> </div>`);\r\n    //     }\r\n    // }\r\n\r\n    // const itemFirst = new MenuItemCard('img/tabs/vegy.jpg', 'Меню \"Фитнес\"', 'Меню \"Фитнес\" - это новый подход к приготовлению блюд: больше свежих овощей и фруктов. Продукт активных и здоровых людей. Это абсолютно новый продукт с оптимальной ценой и высоким качеством!', '229', 'vegy');\r\n    // const secondFirst = new MenuItemCard('img/tabs/post.jpg', 'Меню \"Фитнес 2\"', 'Меню \"Фитнес\" - это новый подход к приготовлению блюд: больше свежих овощей и фруктов. Продукт активных и здоровых людей. Это абсолютно новый продукт с оптимальной ценой и высоким качеством!', '229', 'vegy');\r\n    // const nextFirst = new MenuItemCard('img/tabs/elite.jpg', 'Меню \"Фитнес 3\"', 'Меню \"Фитнес\" - это новый подход к приготовлению блюд: больше свежих овощей и фруктов. Продукт активных и здоровых людей. Это абсолютно новый продукт с оптимальной ценой и высоким качеством!', '229', 'vegy');\r\n\r\n    // itemFirst.addedImage();\r\n    // secondFirst.addedImage();\r\n    // nextFirst.addedImage();\r\n\r\n    //--- Решение преподаваиеля ---\r\n\r\n    // class MenuCard { //создаем новый класс, название класса с большой буквы\r\n    //     constructor(src, alt, title, descr, price, parentSelector) { //вызываем конструктор с аргументами \r\n    //         this.src = src;\r\n    //         this.alt = alt;\r\n    //         this.title = title;\r\n    //         this.descr = descr;\r\n    //         this.price = price;\r\n    //         this.parent = document.querySelector(parentSelector);\r\n    //         this.transfer = 27; //создаем свойство с курсом валют, для перевода в гривны\r\n    //         this.changeToUAH(); //методы можно вызывать прямо внутри конструктора, чтобы он вывел нам итоговую сумму в гривнах\r\n    //     }\r\n\r\n    //     changeToUAH() { //создаем метод для конвертации валют в гривны\r\n    //         this.price = this.price * this.transfer;\r\n\r\n    //     }\r\n\r\n    //     render() { //метод для создания верстки\r\n    //         const element = document.createElement('div'); //создаем элемент, пока он существуект только в скриптах\r\n    //         // вставляем в наш див нашу html структуру\r\n    //         element.innerHTML = `\r\n    //             <div class=\"menu__item\">\r\n    //                 <img src=\"${this.src}\" alt=\"${this.alt}\">\r\n    //                 <h3 class=\"menu__item-subtitle\">${this.title}</h3>\r\n    //                 <div class=\"menu__item-descr\">\r\n    //                     ${this.descr}\r\n    //                 </div>\r\n    //                 <div class=\"menu__item-divider\"></div>\r\n    //                 <div class=\"menu__item-price\">\r\n    //                     <div class=\"menu__item-cost\">Цена:</div>\r\n    //                     <div class=\"menu__item-total\"><span>${this.price}</span> грн/день</div>\r\n    //                 </div>\r\n    //             </div>\r\n    //         `;\r\n\r\n    //         this.parent.append(element); //говорим что в нашего родителя добавили наш элемент\r\n\r\n    //     }\r\n\r\n    // }\r\n\r\n    // const div1 = new MenuCard(\r\n    //     'img/tabs/vegy.jpg', \r\n    //     'vegy',\r\n    //     'Меню \"Фитнес\"', \r\n    //     'Меню \"Фитнес\" - это новый подход к приготовлению блюд: больше свежих овощей и фруктов. Продукт активных и здоровых людей. Это абсолютно новый продукт с оптимальной ценой и высоким качеством!', \r\n    //     9,\r\n    //     '.menu .container');\r\n\r\n    // const div2 = new MenuCard(\r\n    //     'img/tabs/elite.jpg', \r\n    //     'elite',\r\n    //     'Меню “Премиум”', \r\n    //     'В меню “Премиум” мы используем не только красивый дизайн упаковки, но и качественное исполнение блюд. Красная рыба, морепродукты, фрукты - ресторанное меню без похода в ресторан!', \r\n    //     9,\r\n    //     '.menu .container');\r\n\r\n    // const div3 = new MenuCard(\r\n    //     'img/tabs/post.jpg', \r\n    //     'post',\r\n    //     'Меню \"Постное\"', \r\n    //     'Меню “Постное” - это тщательный подбор ингредиентов: полное отсутствие продуктов животного происхождения, молоко из миндаля, овса, кокоса или гречки, правильное количество белков за счет тофу и импортных вегетарианских стейков.', \r\n    //     9,\r\n    //     '.menu .container');\r\n\r\n    // div1.render();\r\n    // div2.render();\r\n    // div3.render();\r\n\r\n    //new MenuCard().render(); -- можно делать такую запись если объект используется только здесь и сейчас\r\n\r\n    //--- REST оператор и параметры по умолчанию\r\n\r\n    // class MenuCard { //создаем новый класс, название класса с большой буквы\r\n    //     constructor(src, alt, title, descr, price, parentSelector, ...classes) { //вызываем конструктор с аргументами, последним аргументом передаем классы для элемента, который добавляем\r\n    //         this.src = src;\r\n    //         this.alt = alt;\r\n    //         this.title = title;\r\n    //         this.descr = descr;\r\n    //         this.price = price;\r\n    //         this.classes = classes; //переадваться будет массив классов из оператора rest\r\n    //         this.parent = document.querySelector(parentSelector);\r\n    //         this.transfer = 27; //создаем свойство с курсом валют, для перевода в гривны\r\n    //         this.changeToUAH(); //методы можно вызывать прямо внутри конструктора, чтобы он вывел нам итоговую сумму в гривнах\r\n    //     }\r\n\r\n    //     changeToUAH() { //создаем метод для конвертации валют в гривны\r\n    //         this.price = this.price * this.transfer;\r\n\r\n    //     }\r\n\r\n    //     render() { //метод для создания верстки\r\n    //         const element = document.createElement('div'); //создаем элемент, пока он существуект только в скриптах\r\n\r\n    //         if (this.classes.length === 0) { //так как мы для rest оператора не можем назначить значения по дефолту, и он будет в любом случае true, так как даже если не будет введен класс, то он создаст пустой массив, а пустой массив это тру\r\n    //             //то проверяем на длину массива, если он равен нулю, то назначаем значение по умолчанию\r\n    //             this.element = 'menu__item'; //создваем новое свойство для данного элемента значение элемнета\r\n    //             element.classList.add(this.element); //и голворим, что значение нового свойства добавим как новый класс в наш элемент\r\n\r\n    //         } else {\r\n    //             this.classes.forEach(className => element.classList.add(className)); //берем массив классов, перебираем его и каждый класс добавляем нашему новосозданному элементу\r\n\r\n    //         }\r\n    //         // вставляем в наш див нашу html структуру\r\n    //         element.innerHTML = `\r\n    //             <img src=\"${this.src}\" alt=\"${this.alt}\">\r\n    //             <h3 class=\"menu__item-subtitle\">${this.title}</h3>\r\n    //             <div class=\"menu__item-descr\">\r\n    //                 ${this.descr}\r\n    //             </div>\r\n    //             <div class=\"menu__item-divider\"></div>\r\n    //             <div class=\"menu__item-price\">\r\n    //                 <div class=\"menu__item-cost\">Цена:</div>\r\n    //                 <div class=\"menu__item-total\"><span>${this.price}</span> грн/день</div>\r\n    //             </div>\r\n    //         `;\r\n\r\n    //         this.parent.append(element); //говорим что в нашего родителя добавили наш элемент\r\n\r\n    //     }\r\n\r\n    // }\r\n\r\n    // const div1 = new MenuCard(\r\n    //     'img/tabs/vegy.jpg',\r\n    //     'vegy',\r\n    //     'Меню \"Фитнес\"',\r\n    //     'Меню \"Фитнес\" - это новый подход к приготовлению блюд: больше свежих овощей и фруктов. Продукт активных и здоровых людей. Это абсолютно новый продукт с оптимальной ценой и высоким качеством!',\r\n    //     9,\r\n    //     '.menu .container');\r\n\r\n    // const div2 = new MenuCard(\r\n    //     'img/tabs/elite.jpg',\r\n    //     'elite',\r\n    //     'Меню “Премиум”',\r\n    //     'В меню “Премиум” мы используем не только красивый дизайн упаковки, но и качественное исполнение блюд. Красная рыба, морепродукты, фрукты - ресторанное меню без похода в ресторан!',\r\n    //     9,\r\n    //     '.menu .container');\r\n\r\n    // const div3 = new MenuCard(\r\n    //     'img/tabs/post.jpg',\r\n    //     'post',\r\n    //     'Меню \"Постное\"',\r\n    //     'Меню “Постное” - это тщательный подбор ингредиентов: полное отсутствие продуктов животного происхождения, молоко из миндаля, овса, кокоса или гречки, правильное количество белков за счет тофу и импортных вегетарианских стейков.',\r\n    //     9,\r\n    //     '.menu .container');\r\n\r\n    // div1.render();\r\n    // div2.render();\r\n    // div3.render();\r\n\r\n    //---!! способ создания карточек с данными получеными из базы данных !!---\r\n\r\n    // const getResource = async (url) => { //создаем функцию запроса данных для карточек товаров из json файла\r\n    //     let res = await fetch(url); //вызываем fetch с адресом ресурса\r\n\r\n    //     if (!res.ok) { //пишем запрос на статус объекта, если НЕ ок\r\n    //         throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n    //     }\r\n    //     return await res.json(); //возвращаем промис в виде js\r\n    // };\r\n\r\n    // // getResource('http://localhost:3000/menu') //вызываем функцию getResources с адресом на нашу базу данных\r\n    // //     .then(data => { //берем полученные данные, которые у нас уже в виде объекта(в нашем случае массива)\r\n    //         // data.forEach(({\r\n    //         //     img,\r\n    //         //     altimg,\r\n    //         //     title,\r\n    //         //     descr,\r\n    //         //     price\r\n    //         // }) => { //используем диструкторизацию объекта, в фиг.скобках, укаазываем свойства объекта, значения которых нам необходимо применить\r\n    //         //     new MenuCard(img, altimg, title, descr, price, '.menu .container').render(); //вызываем наш конструктор MenuCard столько раз, сколько объектов придет с сервера\r\n\r\n\r\n    //         // });\r\n    // //     });\r\n\r\n    // // getResource('http://localhost:3000/menu') //вызываем функцию getResources с адресом на нашу базу данных\r\n    // //     .then(data => createCard(data));\r\n\r\n    // axios.get('http://localhost:3000/menu')\r\n    // .then(data => {\r\n    //     data.data.forEach(({\r\n    //         img,\r\n    //         altimg,\r\n    //         title,\r\n    //         descr,\r\n    //         price\r\n    //     }) => { //используем диструкторизацию объекта, в фиг.скобках, укаазываем свойства объекта, значения которых нам необходимо применить\r\n    //         new MenuCard(img, altimg, title, descr, price, '.menu .container').render(); //вызываем наш конструктор MenuCard столько раз, сколько объектов придет с сервера\r\n\r\n\r\n    //     });\r\n    // });\r\n\r\n    // function createCard(data) { //создаем функцию, которая будет формировать карточки на странице, как атрибут будут данные пришедшие с сервера\r\n    //     data.forEach(({ //перебираем массив объектов полученых с сервера, как аргументы вносим деструктуризацию объекта\r\n    //         img,\r\n    //         altimg,\r\n    //         title,\r\n    //         descr,\r\n    //         price\r\n    //     }) => {\r\n    //         const element = document.createElement('div'); //создаем новый див\r\n    //         element.classList.add('menu__item'); //задем этому элементу класс\r\n    //         // вставляем в наш див нашу html структуру\r\n    //         element.innerHTML = ` \r\n    //             <img src=\"${img}\" alt=\"${altimg}\">\r\n    //             <h3 class=\"menu__item-subtitle\">${title}</h3>\r\n    //             <div class=\"menu__item-descr\">\r\n    //                 ${descr}\r\n    //             </div>\r\n    //             <div class=\"menu__item-divider\"></div>\r\n    //             <div class=\"menu__item-price\">\r\n    //                 <div class=\"menu__item-cost\">Цена:</div>\r\n    //                 <div class=\"menu__item-total\"><span>${price}</span> грн/день</div>\r\n    //             </div>\r\n    //         `;\r\n\r\n    //         document.querySelector('.menu .container').append(element); //вставляем наш новый элемент в меню контейнер\r\n    //     });\r\n    // }\r\n\r\n}\r\n\r\n// module.exports = cards;\r\nexport default cards;","import {\r\n    closeModal,\r\n    openModal\r\n} from './modal'; // импортируем именованые функции из modal\r\nimport {\r\n    postData\r\n} from '../services/services';\r\n\r\nfunction forms(formSelector, modalTimerId) {\r\n    // Отпаравука данных на сервер Forms\r\n\r\n    const form = document.querySelectorAll(formSelector); //берем все формы с нашего сайта\r\n    const message = { //создаем объект с ответами на нашу олтправку формы\r\n        loading: 'icons/spinner.svg', //пока идет заргрузка формы\r\n        success: 'Спасибо! Скоро мы с Вами свяжемся!', //при удачной отправке формы\r\n        failure: 'Что-то пошло не так...' //при ошибке загрузки\r\n    };\r\n\r\n    form.forEach(item => { //перебираем наши формы\r\n        bindPostData(item); //и вызываем отправку формы текущей на сервер\r\n\r\n    });\r\n\r\n\r\n\r\n    function bindPostData(form) { //Функция которая будет отправлять данные на сервер, как аргумент выступает форма для отправки\r\n        form.addEventListener('submit', (e) => { //навешиваем на форму обработчик события сабмит, оно срабатывает при попытке отправить форму\r\n            //событие отправик срабатывает либо при нажатии клавиши Enter, либо при клике на поле у которого стоит type='submit'\r\n            e.preventDefault(); //отменяекм стандартное поведение браузера(перезагрузку страницы при отправке формы)\r\n\r\n            const statusMessage = document.createElement('img'); //создаем новый элекмент на страницек для показа спинера при загрузке\r\n            statusMessage.src = message.loading; //добавляем к картинке аттрибут src в котором будет прописан путь к картинке со спинером\r\n            //прописываем инлайн-стили для нашей картинки со спинером\r\n            statusMessage.style.cssText = `\r\n                    display: block;\r\n                    margin: 0 auto;\r\n                `;\r\n            // form.append(statusMessage); //добавляем этот элемент-сообщение в нашу форму\r\n\r\n            form.insertAdjacentElement('afterend', statusMessage); //добавляем наш спинер в структуру штмл, первый аттрибут указывает куда вставляем(после формы)\r\n            //второй аттрибут что вставляем(наш спинер)\r\n\r\n            //---!! УСТАРЕВШИЙ  способ отправки запросов на сервер\r\n\r\n            // const request = new XMLHttpRequest(); //создаем объект запроса с помощью конструктора XMLHttpRequest\r\n            // request.open('POST', 'server.php'); //открывавем запрос(вводим данные по запросу: тип запроса и путь на который мы будем ссылаться)\r\n            // request.setRequestHeader('Content-type', 'application/json'); //создаем заголовки запроса, что нам будет приходить\r\n\r\n\r\n            const formData = new FormData(form); //формируем новый объект, с помощью конструктора formData который возьмет все данные пользователя из формы\r\n            //как аргумент передаем ту форму из которой нам нужно собрать данные\r\n\r\n            // const object = {}; //создаем пустой объект, в который будут записываться данные из массива FormData\r\n\r\n            // formData.forEach(function (value, key) { //перебираем массив formData и передаем в функцию аргументы - значените и ключ, для формирования объекта\r\n            //     object[key] = value; //берем наш объект и говорим, что ключ(индекс элекмента) объекта равен значению\r\n            // });\r\n\r\n            const json = JSON.stringify(Object.fromEntries(formData.entries())); //превразщаем полученые данные в массив массивов, а потом обратно в объект, а затем в json\r\n\r\n\r\n            // const json = JSON.stringify(object); //конвертируем наш полученный объект в json формат\r\n\r\n            // request.send(json); //отправляем нашу объект, который мы сформировали с помощью json, на сервер\r\n\r\n            //---!! СОВРЕМЕННЫЙ  способ отправки запросов на сервер\r\n\r\n\r\n            postData('http://localhost:3000/requests', json)\r\n                .then(data => { //получаем с сервера какие то данные\r\n                    console.log(data); // выводим ответ на наш запрос\r\n                    showThanksModal(message.success); //вызываем функцию показа сообщений, в котором говорим, что все прошло успешно\r\n                    statusMessage.remove(); //и удаляем спинер со странички\r\n                })\r\n                .catch(() => { //при ошибки отправки запроса\r\n                    // при fetch не сработает c ошибкой в пути, так как получит все равно после запроса true с той только разницей, что в статусе будет false\r\n                    //сработает только с системными ошибками(например отстутствие интернета)\r\n                    showThanksModal(message.failure); //при неудачной загрузке вызываем функцию показа сообщений, в котором говорим, что все прошло плохо\r\n                })\r\n                .finally(() => { //выполняем при любом исходе запроса очистку формы\r\n                    form.reset(); //чистим данные формы, которые ввели\r\n                });\r\n\r\n            // request.addEventListener('load', () => { //на нашу отправку вешаем обработчик события и отслеживаем полную загрузку формы\r\n            //     if (request.status === 200) { //проверяем что статус отправки положительный, все хорошо\r\n            //         console.log(request.response); // выводим ответ на наш запрос\r\n            //         showThanksModal(message.success); //вызываем функцию показа сообщений, в котором говорим, что все прошло успешно\r\n            //         form.reset(); //чистим данные формы, которые ввели\r\n            //         statusMessage.remove(); //и удаляем спинер со странички\r\n            //     } else {\r\n            //         showThanksModal(message.failure); //при неудачной загрузке вызываем функцию показа сообщений, в котором говорим, что все прошло плохо\r\n            //     }\r\n            // });\r\n        });\r\n    }\r\n\r\n    //---Наводим красоту ---\r\n\r\n    function showThanksModal(message) { //создаем функцию, которая выводит(заменяет) модальное окно с сообщением для пользователя\r\n        const prevModalDialog = document.querySelector('.modal__dialog'); //получаем наше модальное окно с сайта\r\n\r\n        prevModalDialog.classList.add('hide'); // добавляем rjyntyne мод. окнf c формой класс hide, который скроет его от пользователя до того как его откроют\r\n        openModal('.modal', modalTimerId); //далее открываем модальное окно \r\n\r\n        const thanksModal = document.createElement('div'); //Zсоздаем новый элемент для модального окна с сообщениями для клиента\r\n        thanksModal.classList.add('modal__dialog'); //добавляем новому элементу класс modal-dialog чтобы подтянулись стили для обертки контентной части модального окна\r\n        //далее в наш блок кладем html-структуру\r\n        thanksModal.innerHTML = `\r\n                <div class=\"modal__content\">\r\n                    <div data-close class=\"modal__close\">&times;</div>\r\n                    <div class=\"modal__title\">${message}</div>\r\n                </div>\r\n    \r\n            `;\r\n\r\n        document.querySelector('.modal').append(thanksModal); //берем элемент модал и добавляем в него наш новый элемент modal-dialog\r\n        setTimeout(() => { //устанавливаем таймер, который будет убирать сообщение и опять показывать форму\r\n            thanksModal.remove(); //убираем сообщение\r\n            prevModalDialog.classList.add('show'); //добавляем класс showи показываем обратно окно с формой\r\n            prevModalDialog.classList.remove('hide'); //убираем класс hide\r\n            closeModal('.modal'); //и закрываем модальное окно полностью\r\n        }, 4000); //через 4 секунды\r\n    }\r\n\r\n    // //---!! API - интерфейс какого-то программного обеспечения, либо приложения !!---\r\n    // //---!! набор каких то инструментов и возможностей, которое нам дает какое то уже готовое решение !!---\r\n    // //---!! DOM API - это различные методы, которые дают нам возможность работать с элементами на странице !!---\r\n    // //---!! FECH API - встроеные в браузер инструмент, который позволяет общаться с сервером с помощью promise !!---\r\n\r\n}\r\n\r\n// module.exports = forms;\r\nexport default forms;\r\n\r\n// //--- GET запрос\r\n\r\n// fetch('https://jsonplaceholder.typicode.com/todos/1') //как аргумент передается тот url на который мы будем посылать запрос\r\n// //в данном случаем мы просто получаем get запрос с этого url\r\n// //вернется именно promise\r\n//     .then(response => response.json()) //обрабатываем полученный промис с помощью then(при удачном выполнении запроса)\r\n//     //вернется тоже promise и если удачно прошло то\r\n//     //в данном случае мы берем ответ и добавляем к нему метод json() который полученный json превратит в обычный объект js\r\n//     .then(json => console.log(json));//при удачной обработке файла мы выводим наш объект в консоль\r\n\r\n// //--- POST запрос\r\n// fetch('https://jsonplaceholder.typicode.com/posts', {\r\n//     method: 'POST', //ОБЯЗАТЕЛЬНОЕ СВОЙСТВО\r\n//     body: JSON.stringify({name: 'Alex'}), //ОБЯЗАТЕЛЬНОЕ СВОЙСТВО\r\n//     headers: { //Желательное свойство, добавляем заголовки, какого типа данные мы отправляем\r\n//         'Content-type': 'application/json'\r\n//     }\r\n// }) //как второй аргумент добавляется объект, с двумя обязательными свойствами - метод (POST), body(тело, данные, которые отправляем)\r\n// //в данном случае оборачиваем новый объект в метод stringify, чтобы он этот объект сконвертировал и добавил в json\r\n// .then(response => response.json()) \r\n// .then(json => console.log(json));\r\n\r\n//---!! NPM-пакеты и JSON-server !!---\r\n//---!! Прежде, чем установить npm пакеты, необходимо развернуть npm-проект  !!---\r\n\r\n// 1 - инциализируем npm - (npm init) - заполняем все поля или пропускаем\r\n// 2 - получаем package.json - в нем содержиться вся информация о проекте и будет информация о подключенных пакетах\r\n// 3 - установка npm пакетов(предпочтительнее устанавливать ЛОКАЛЬНЫЕ пакеты(-g - глобальный, без ярлыка - локальный))\r\n//     npm install - команда которая устанавливает все необходимые пакеты, которые указаны в json афйле\r\n//     --save-dev - указывает, что устанавливаемый пакет будет использован только для разработки\r\n//     --save - указывает, что это обязательный пакет, составляет костяк проекта и необходим внутри пакета\r\n// json-server - (npm i json-server --save-dev) - позволяет работать с json файлами и использовать их как маленькую базу данный, позволяет отправлять и POST-запросы\r\n// запуск json-server - в терминале пишем (npx json-server [файл_который_хотим_использовать]) - пример: json-server db.json\r\n\r\n\r\n//---!! Использование JSON-файла как базу данных !!--\r\n\r\n// fetch('http://localhost:3000/menu') //используем fetch и как путь указываем наш жсон файл, get запрос, который возвращает promise\r\n//     .then(data => data.json()) //возьмем полученый json и превратим его в обычный объект с помощью метода json()\r\n//     .then(result => console.log(result)); //затем полученый результат выводим в консоль","//чтобы код не повторялся два раза. необходимо создать одну функцию с повторяющимся кодом и использовать\r\nfunction closeModal(modalSelector) {\r\n    const modal = document.querySelector(modalSelector);\r\n    modal.classList.add('hide');\r\n    modal.classList.remove('show');\r\n    document.body.style.overflow = '';\r\n}\r\n\r\nfunction openModal(modalSelector, modalTimerId) { //создаем функцию для открытия модального окна\r\n    const modal = document.querySelector(modalSelector);\r\n    modal.classList.add('show');\r\n    modal.classList.remove('hide');\r\n    document.body.style.overflow = 'hidden';\r\n    if (modalTimerId) {\r\n        clearInterval(modalTimerId); //говорим, что если действия выше уже отработали(пользователь сам открыл окно), то таймер отключить\r\n    }\r\n}\r\n\r\nfunction modal(triggerSelector, modalSelector, modalTimerId) {\r\n    //--- Модальное окно ---\r\n\r\n    //Назначаем data-атрибуты для кнопок, по клику на которые будет появляться модальное окно\r\n\r\n    //--- Мой вариант решения ---\r\n\r\n    // const btnModal = document.querySelectorAll('[data-modal]');\r\n    // const btnClose = document.querySelector('[data-close]');\r\n    // const modalWindow = document.querySelector('.modal');\r\n\r\n    // btnModal.forEach(item => {  //перебираем псевдомассив кнопок с дата атрибутом\r\n    //     item.addEventListener('click', () => { //отслеживаем клик по каждой кнопке       \r\n    //         modalWindow.classList.add('show', 'fade');  // говорим, что при клике, для элемента модальное окно, добавляем класс show\r\n    //         modalWindow.classList.remove('hide'); //убрать класс hide\r\n    //     });\r\n    // });\r\n    // btnClose.addEventListener('click', () => { //отслеживаем клик по кнопке close     \r\n    //     modalWindow.classList.add('hide');  // говорим, что при клике, для элемента модальное окно, добавляем класс hide\r\n    //     modalWindow.classList.remove('show', 'fade'); //говорим, чтобы удалил классы show и fade\r\n    // });\r\n\r\n    //--- Решение с преподавателем ---\r\n\r\n    const modalTrigger = document.querySelectorAll(triggerSelector),\r\n        modal = document.querySelector(modalSelector, modalTimerId);\r\n    // modalCloseBtn = document.querySelector('[data-close]'); //---не будет работать с элементами, которые создаются динамически\r\n\r\n\r\n    modalTrigger.forEach(btn => { //перебираем все кнопки\r\n        btn.addEventListener('click', () => //отслеживаем на каждой кнопке клик\r\n            // modal.classList.add('show'); //при клике на кнопку, модальному окну назначаем класс show\r\n            // modal.classList.remove('hide'); // и убираем, если есть класс hide\r\n            // document.body.style.overflow = 'hidden'; // также обращаемся к элементу body и прописываем ему инлайн стиль overflow: hidden, чтобы не прокручивалась страница\r\n            openModal(modalSelector)\r\n        );\r\n    });\r\n\r\n\r\n\r\n    // modalCloseBtn.addEventListener('click', () => {//отслеживаем на кнопке клик\r\n    //     modal.classList.add('hide');//при клике на кнопку, модальному окну назначаем класс hide\r\n    //     modal.classList.remove('show');// и убираем, если есть класс show\r\n    //     document.body.style.overflow = ''; // также обращаемся к элементу body и прописываем ему инлайн стиль overflow(оставляем пустое значение, чтобы браузер сам решил какое значение по дефолту подставить)\r\n\r\n    // });\r\n\r\n    // modalCloseBtn.addEventListener('click', closeModal); //не вызываем функцию, а просто передаем, она сработает только после клика на элемент\r\n\r\n    modal.addEventListener('click', function (e) { //отслеживаем клик на модальное окно\r\n        if (e.target === modal || e.target.getAttribute('data-close') == '') { //проверяем, если событие таргет равно непосредственно модальному окну(серая подложка), \r\n            // или у самого элемента, на который мы кликнули есть аттрибут data-close(равно пустой строке, потому что мы туда ничего не помещаем), то\r\n            // modal.classList.add('hide');//модальному окну назначаем класс hide\r\n            // modal.classList.remove('show');// и убираем, если есть класс show\r\n            // document.body.style.overflow = ''; // также обращаемся к элементу body и прописываем ему инлайн стиль overflow(оставляем пустое значение, чтобы браузер сам решил какое значение по дефолту подставить)    \r\n            closeModal(modalSelector); //а здесь функцию именно вызываем, так как нам надо ее выполнить только после того как выполнится условие\r\n        }\r\n    });\r\n\r\n    document.addEventListener('keydown', (e) => { //отслеживаем нажатие клавиши на клавиатуре и передаем объект события\r\n        if (e.code === 'Escape' && modal.classList.contains('show')) { //если код клавиши по которой кликнули равна строке искейп,\r\n            //и так же проверяем содержит ли можальное окно класс show\r\n            closeModal(modalSelector); //если условия соблюдены, то закрываем модальное окно\r\n        }\r\n    });\r\n\r\n\r\n    //--- Модификации модального окна ---\r\n    //--- Вызываем модальное окно через определенный промежуток времени ---\r\n\r\n    //--- задача,если пользователь долистал страницу до конца, то открываем модальное окно ---\r\n\r\n    function showModalByScroll() { //создаем функцию, открытия окна при скроллинге страницы вниз\r\n        if (window.pageYOffset + document.documentElement.clientHeight >= document.documentElement.scrollHeight - 1) {\r\n            //если высоте пролистанного контента(невидимого) + высота видимого контента больше или равно высоте всего документа(видимая и невидимая часть)\r\n            openModal(modalSelector, modalTimerId);\r\n            window.removeEventListener('scroll', showModalByScroll); //говорим, что для окна браузера после того как окно модальное было ужек открыто,\r\n            // мы убираем отслеживание события скролл и отработку функции открытия окна модального\r\n        }\r\n    }\r\n\r\n    window.addEventListener('scroll', showModalByScroll); //отслеживаем скроллинг страницы и после этого определяем функцию открытия можального окна\r\n\r\n\r\n}\r\n\r\n// module.exports = modal;\r\nexport default modal; //создаем один дефолтный модуль\r\nexport {\r\n    closeModal\r\n};\r\nexport {\r\n    openModal\r\n}; //и два именованых","function slider({\r\n    container,\r\n    slide,\r\n    nextArrow,\r\n    prevArrow,\r\n    totalCounter,\r\n    currentCounter,\r\n    wrapper,\r\n    field\r\n}) {\r\n\r\n\r\n    //---SLIDER V1 ---\r\n\r\n    //--- Мой код, НЕ зарабюотал ---\r\n\r\n    // const prevArrow = document.querySelector('.offer__slider-prev'),\r\n    //       nextArrow = document.querySelector('.offer__slider-next'),\r\n    //       parentArrows = document.querySelector('offer__slider-counter'),\r\n    //       currentCounter = document.querySelector('#current'),\r\n    //       totalCounter = document.querySelector('#total'),\r\n    //       sliderItems = document.querySelectorAll('.offer__slide');\r\n\r\n    //     console.log(sliderItems);\r\n\r\n    //     function startSliderItem() {\r\n    //         sliderItems.forEach((item, i) => {\r\n    //             if(i === 0) {\r\n    //                 item.classList.add('show');\r\n    //                 item.classList.remove('hide');\r\n    //                 if(i+1 < 10) {\r\n    //                     currentCounter.innerHTML = `0${i+1}`;\r\n    //                 } else {\r\n    //                     currentCounter.innerHTML = `${i+1}`;\r\n    //                 }  \r\n    //             } else {\r\n    //                 item.classList.add('hide');\r\n    //             }        \r\n    //         });\r\n    //     }\r\n\r\n\r\n\r\n    // function checkNumberItems(arrow, box) {\r\n    //     const arrowItems = sliderItems.length;\r\n    //     if(arrowItems < 10) {\r\n    //         box.innerHTML = `0${arrowItems}`;\r\n    //     } else {\r\n    //         box.innerHTML = `${arrowItems}`;\r\n    //     }        \r\n    // }    \r\n\r\n    // function nextSlide() {\r\n    //     nextArrow.addEventListener('click', (event) => {\r\n    //         const target = event.target; \r\n\r\n    //         if(target && target.classList.contains('offer__slider-next')) {\r\n    //             const num = + currentCounter.innerHTML;\r\n    //             const index = num -1;\r\n\r\n    //             console.log(num);\r\n    //             console.log(index);\r\n    //             console.log(sliderItems.length);\r\n    //             if(num > sliderItems.length - 1) {\r\n    //                 startSliderItem();\r\n    //             }  else {\r\n\r\n    //                 sliderItems[index].classList.add('hide');\r\n    //                 sliderItems[index].classList.remove('show');\r\n    //                 sliderItems[num].classList.add('show');\r\n    //                 sliderItems[num].classList.remove('hide');\r\n    //                 if(num + 1 < 10) {\r\n    //                     currentCounter.innerHTML = `0${num + 1}`;\r\n    //                 } else {\r\n    //                     currentCounter.innerHTML = `${num + 1}`;\r\n    //                 }\r\n\r\n    //             }\r\n\r\n\r\n    //         }\r\n\r\n\r\n    //     });\r\n    // }\r\n\r\n    // function prevSlide() {\r\n    //     prevArrow.addEventListener('click', (event) => {\r\n    //         const target = event.target; \r\n\r\n    //         if(target && target.classList.contains('offer__slider-prev')) {\r\n    //             let num = + currentCounter.innerHTML;\r\n    //             let index = num - 1;\r\n\r\n    //             if(num < 2) {\r\n    //                 num = + sliderItems.length -1;\r\n    //                 index = num - 1;\r\n    //             }  \r\n    //             console.log(num);\r\n    //             console.log(index);\r\n    //             console.log('prev');\r\n\r\n    //             sliderItems[index].classList.add('hide');\r\n    //             sliderItems[index].classList.remove('show');\r\n    //             sliderItems[index - 1].classList.add('show');\r\n    //             sliderItems[index - 1].classList.remove('hide');\r\n    //             if(num - 1 < 10) {\r\n    //                 currentCounter.innerHTML = `0${num - 1}`;\r\n    //             } else {\r\n    //                 currentCounter.innerHTML = `${num - 1}`;\r\n    //             }\r\n\r\n\r\n    //         } \r\n\r\n    //     });\r\n    // }\r\n\r\n\r\n    // function showSliderItem() {\r\n    //     startSliderItem();\r\n    //     nextSlide();\r\n    //     prevSlide();\r\n\r\n    // }\r\n    // showSliderItem();\r\n\r\n    // checkNumberItems(sliderItems, totalCounter);\r\n\r\n\r\n    //--- Вариант преподавателя ---\r\n\r\n    const slides = document.querySelectorAll(slide),\r\n        slider = document.querySelector(container),\r\n        prev = document.querySelector(prevArrow),\r\n        next = document.querySelector(nextArrow),\r\n        total = document.querySelector(totalCounter),\r\n        current = document.querySelector(currentCounter),\r\n        slidesWrapper = document.querySelector(wrapper),\r\n        slidesField = document.querySelector(field),\r\n        width = window.getComputedStyle(slidesWrapper).width; //обращаемся к окнцу браузера и просим данные о стилях, которые были применены уже к определенным блокам\r\n    //(в данном случае обертке слайдера и получаем ширину)\r\n    let slideIndex = 1,\r\n        offset = 0; //переменная показывающая сколько мы уже отступили\r\n\r\n\r\n\r\n    //--- slider 2 ---\r\n\r\n    if (slides.length < 10) {\r\n        total.textContent = `0${slides.length}`;\r\n        current.textContent = `0${slideIndex}`;\r\n    } else {\r\n        total.textContent = slides.length;\r\n        current.textContent = slideIndex;\r\n    }\r\n\r\n    slidesField.style.width = 100 * slides.length + '%'; //задаем для контейнера всех слайдеров ширину равную количество слайдов * 100%\r\n    //так как каждый слайд будет занимать 100% видимого родителя\r\n    slidesField.style.display = 'flex'; //меняем для контейнера слайдов дисплей на флекс, чтобы слайды выстроились в ряд\r\n    slidesField.style.transition = '0.5s all'; //и говорим, что слайды заменяться должны плавно\r\n\r\n    slidesWrapper.style.overflow = 'hidden'; //для видимого родителя назначаем overflow:hidden, чтобы обрезать лишние файлы\r\n\r\n    slides.forEach(slide => { //перебираем каждый слайд\r\n        slide.style.width = width; //каждому слайду назначаем ширину равную ширине видимого родителя\r\n    });\r\n\r\n    slider.style.position = 'relative';\r\n    const indicators = document.createElement('ol'),\r\n        dots = [];\r\n\r\n\r\n    indicators.classList.add('carousel-indicators');\r\n    slider.append(indicators);\r\n\r\n    for (let i = 0; i < slides.length; i++) {\r\n        const dot = document.createElement('li');\r\n        dot.classList.add('dot');\r\n        dot.setAttribute('data-slide-to', i + 1);\r\n        //добавляем к li data-фттрибут со значением равным i+1((индекс в массиве + 1))\r\n        if (i == 0) {\r\n            dot.style.opacity = 1;\r\n        }\r\n\r\n        indicators.append(dot);\r\n        dots.push(dot);\r\n    }\r\n\r\n    function deleteNotDigits(str) {\r\n        return +str.replace(/\\D/g, '');\r\n    }\r\n\r\n    next.addEventListener('click', () => { //сдвиг слайдера на следующий слайд\r\n        //делаем проверку не дошел ли слайдер до последнего слайда\r\n        if (offset == deleteNotDigits(width) * (slides.length - 1)) { //если наш отступ равен ширине всех наших слайдов(то есть дошли до конца слайдов)\r\n            //+width - превращаем строку в числовойтип данных\r\n            //затем вырезаем из строки ширины все символы начиная с нулевого заканчивая 3им с конца\r\n            //то есть два крайних, которые в строке (px) выкидываем\r\n            offset = 0; //то устанавливаем ему значение 0(то есть говорим отсчитывать слайды сначала)\r\n        } else { //если отступ не дошел до конца\r\n            offset += deleteNotDigits(width); //мы к нему прибавляем ширину одного слайда, то есть сдвигаем на шаг\r\n        }\r\n\r\n        slidesField.style.transform = `translateX(-${offset}px)`;\r\n        //обращаемся к контейнеру слайдеров и говорим, что он должен сдвинуться влево на определенное количесатво пикселей\r\n\r\n        if (slideIndex == slides.length) {\r\n            slideIndex = 1;\r\n        } else {\r\n            slideIndex++;\r\n        }\r\n\r\n        if (slides.length < 10) {\r\n            current.textContent = `0${slideIndex}`;\r\n        } else {\r\n            current.textContent = slideIndex;\r\n        }\r\n\r\n        dots.forEach(dot => dot.style.opacity = '.5');\r\n        dots[slideIndex - 1].style.opacity = 1;\r\n\r\n    });\r\n\r\n    prev.addEventListener('click', () => { //сдвиг слайдера на следующий слайд\r\n        //делаем проверку не дошел ли слайдер до последнего слайда\r\n        if (offset == 0) {\r\n            offset = deleteNotDigits(width) * (slides.length - 1);\r\n        } else {\r\n            offset -= deleteNotDigits(width);\r\n        }\r\n\r\n        slidesField.style.transform = `translateX(-${offset}px)`;\r\n\r\n        if (slideIndex == 1) {\r\n            slideIndex = slides.length;\r\n        } else {\r\n            slideIndex--;\r\n        }\r\n\r\n        if (slides.length < 10) {\r\n            current.textContent = `0${slideIndex}`;\r\n        } else {\r\n            current.textContent = slideIndex;\r\n        }\r\n\r\n        dots.forEach(dot => dot.style.opacity = '.5');\r\n        dots[slideIndex - 1].style.opacity = 1;\r\n    });\r\n\r\n    dots.forEach(dot => {\r\n        dot.addEventListener('click', (e) => {\r\n            const slideTo = e.target.getAttribute('data-slide-to');\r\n            //получаем значение аттрибута того элемента по которому кликнули\r\n\r\n            slideIndex = slideTo;\r\n            offset = deleteNotDigits(width) * (slideTo - 1);\r\n\r\n            slidesField.style.transform = `translateX(-${offset}px)`;\r\n\r\n\r\n            if (slides.length < 10) {\r\n                current.textContent = `0${slideIndex}`;\r\n            } else {\r\n                current.textContent = slideIndex;\r\n            }\r\n\r\n            dots.forEach(dot => dot.style.opacity = '.5');\r\n            dots[slideIndex - 1].style.opacity = 1;\r\n\r\n\r\n        });\r\n    });\r\n}\r\n\r\n// module.exports = slider;\r\nexport default slider;","function tabs(tabsSelector, tabsContentSelector, tabsParentSelector, activeClass) {\r\n    // --- Tabs ---\r\n\r\n    //--- Создаем переменные ---\r\n\r\n    const tabs = document.querySelectorAll(tabsSelector), //получаем псевдомассив табов из меню\r\n        tabsContent = document.querySelectorAll(tabsContentSelector), //получаем псевдомассив блоков с контентом табов\r\n        tabsParent = document.querySelector(tabsParentSelector); // получаем родителя всех табов из меню\r\n\r\n    //--- Скрываем ненужный контент для табов и убираем класс active с самих табов ---\r\n\r\n    function hideTabContent() {\r\n        tabsContent.forEach(item => { //перебираем псевдомассив блоков с контентом, берем каждый отдельно\r\n            // item.style.display = 'none'; //обращаемся к свойству style и прописываем ему в свойство display значение none(инлайновые стили)\r\n            item.classList.remove('show', 'fade');\r\n            item.classList.add('hide');\r\n        });\r\n\r\n        tabs.forEach(item => { //перебираем псевдомассив табов\r\n            item.classList.remove(activeClass); //берем каждый таб, обращаемся к объекту класслист и задаем метод ремув - удаляем указанный класс\r\n        });\r\n    }\r\n\r\n    //--- Показываем нужный контент для табов и добавляем класс active на нужный нам тьаб ---\r\n\r\n    function showTabContent(i = 0) { //стандарт es6, если не передается аргумент, то подставится 0\r\n        // tabsContent[i].style.display = 'block'; //прописываем для конкретного блока с контентом инлайновый стиль дисплей блок\r\n        tabsContent[i].classList.remove('hide');\r\n        tabsContent[i].classList.add('show', 'fade');\r\n        tabs[i].classList.add(activeClass); //для конкретнгого таба добавляем класс активности\r\n    }\r\n\r\n    //--- вызываем функции ---\r\n\r\n    hideTabContent();\r\n    showTabContent();\r\n\r\n    //--- используем делегирование, отслеживаем клик на один из табов, задаем ему классактивности  и открываем нужный таб ---\r\n\r\n    tabsParent.addEventListener('click', (event) => { //отслеживаем клик в родителе табов\r\n        const target = event.target; //создаем переменную с объектом таргет\r\n\r\n        if (target && target.classList.contains(tabsSelector.slice(1))) { //проверяем есть ли вообще объект таргет у события и проверяем соответствие класса, по тому ли элементу мы кликнули\r\n            tabs.forEach((item, i) => { //перебираем псевдомассив всех табов, берем таб и его индекс\r\n                if (target == item) { //если объект таргет равен нашему данному элементу\r\n                    hideTabContent();\r\n                    showTabContent(i); //переключаем табы\r\n                }\r\n\r\n            });\r\n\r\n        }\r\n\r\n    });\r\n}\r\n\r\n// module.exports = tabs;\r\nexport default tabs;","function timer(id, deadline) {\r\n    //--- Timer ---\r\n    function getTimeRemaining(endtime) { //созда ем функцию, которая будет вычислять сколько времени между сегодняшним днем и окончанием акции\r\n        const t = Date.parse(endtime) - Date.parse(new Date()),\r\n            //создаем техническую переменную, в  которой передаем разницу между окончанием акции в миллисекундах и текущей даты в миллисекундах\r\n            days = Math.floor(t / (1000 * 60 * 60 * 24)), //переводим миллисекунды в количество дней\r\n            //создаем переменную, которая роавна -> округляем до целого деление (нашей разницы во времени на произведение ->)\r\n            // 1000миллисекунд * 60 (секунд) * 60часов * 24часа в сутках => столько миллисекунд в сутках\r\n            hours = Math.floor((t / (1000 * 60 * 60) % 24)), //переводим миллисекунды в количество часов\r\n            //миллисекунды разницы течения нашей акции деленная на произведение 1000миллисекунд * 60сек * 60мин => получим всю акцию в часах\r\n            //поскольку нам нужен остаток часов менее суток, то %24 делим с остатком на 24 и этот остаток округляем до целого - получаем часы\r\n            minutes = Math.floor((t / (1000 * 60) % 60)), //получаем остаток менее часа  - оставшиеся минуты акции\r\n            seconds = Math.floor((t / 1000) % 60); //получаем секунда - остаток меньше минуты\r\n\r\n        return { //возвращаем полученные данные в виде объекта\r\n            'total': t,\r\n            'days': days,\r\n            'hours': hours,\r\n            'minutes': minutes,\r\n            'seconds': seconds\r\n        };\r\n    }\r\n\r\n    function getZero(num) { //функция, которое будет просверять число, если оно меньше 10, то спереди будет добавлять 0\r\n        if (num >= 0 && num < 10) { //если наше число  больше или ровно 0 И меньше 10\r\n            return `0${num}`; //то возвращаем вместо числа строку с 0 впереди\r\n        } else {\r\n            return num; //иначе ничего не модифицируем, а просто возвращаем число\r\n        }\r\n    }\r\n\r\n    function setClock(selector, endtime) { //устанавливаем наши часы на сайте\r\n        const timer = document.querySelector(selector), //берем элемент с таймером со страницы\r\n            days = timer.querySelector('#days'), //элемент для записи дней\r\n            hours = timer.querySelector('#hours'), //элемент для записи часов\r\n            minutes = timer.querySelector('#minutes'), //элемент для записи минут\r\n            seconds = timer.querySelector('#seconds'), //элемент для записи секунд\r\n            timeInterval = setInterval(updateClock, 1000); //говорим что функцию обновления счетчика надо обновлять каждую секунду\r\n\r\n        updateClock(); //вызываем функцию первый раз, чтобы не ждать обновления таймера 1000миллисекунд\r\n\r\n        function updateClock() { //создаем функцию, которая будет обновлять наш счетчик каждую секунду\r\n            const t = getTimeRemaining(endtime); //получаем наш объект с оставшимися днями минутами часами\r\n\r\n            days.innerHTML = getZero(t.days); // в элемент с индетификатором days записываем данные из рассчитанного выше объекта свойство days\r\n            hours.innerHTML = getZero(t.hours); //записываем оставшиеся часы\r\n            minutes.innerHTML = getZero(t.minutes); //записываем оставшиеся минуты\r\n            seconds.innerHTML = getZero(t.seconds); //записываем оставшиеся секунды\r\n\r\n            if (t.total <= 0) { //если общее колличество миллисекунд меньше или равно 0\r\n                clearInterval(timeInterval); //останавливаем обновление нашей функции\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    setClock(id, deadline);\r\n}\r\n\r\n// module.exports = timer;\r\nexport default timer;","const postData = async (url, data) => { //создаем функцию, которая постит наши данные, как переменные вводим адрес запроса и данные, которые будут поститься\r\n    //с помощью async мы говорим, что внутри функции будет асинхронный код\r\n    //async - прописывается перед  функцией в которой будет какой-то асинхронный код\r\n    //а await - перед кодом, которого необходимо дождаться, перед тем как дальше выполнять функцию\r\n    let res = await fetch(url, {\r\n        method: 'POST', //метод отправки POST- запрос\r\n        headers: { //прописываем заголовки\r\n            'Content-type': 'application/json'\r\n        },\r\n        body: data //и как тело отправки указываем наш объект formData \r\n    }); //получаем promise который нам возвращает fetch\r\n\r\n    return await res.json(); //возвращаем промис в виде json\r\n};\r\n\r\nexport {\r\n    postData\r\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","'use strict';\r\nimport tabs from './modules/tabs';\r\nimport calc from './modules/calc';\r\nimport cards from './modules/cards';\r\nimport forms from './modules/forms';\r\nimport modal from './modules/modal';\r\nimport slider from './modules/slider';\r\nimport timer from './modules/timer';\r\nimport openModal from './modules/modal';\r\n\r\nwindow.addEventListener('DOMContentLoaded', () => { //отслеживаем загрузку контента на странице\r\n\r\n    const modalTimerId = setTimeout(() => openModal('.modal', modalTimerId), 50000); //создаем таймер отработки функции по открытию можального окна, говорим чтобы сработала она через 3 секунды\r\n\r\n\r\n    // const tabs = require('./modules/tabs'),\r\n    //     calc = require('./modules/calc'),\r\n    //     cards = require('./modules/cards'),\r\n    //     forms = require('./modules/forms'),\r\n    //     modal = require('./modules/modal'),\r\n    //     slider = require('./modules/slider'),\r\n    //     timer = require('./modules/timer');\r\n\r\n\r\n\r\n    tabs('.tabheader__item', '.tabcontent', '.tabheader__items', 'tabheader__item_active');\r\n    calc();\r\n    cards();\r\n    forms('form', modalTimerId);\r\n    modal('[data-modal]', '.modal', modalTimerId);\r\n    slider({\r\n        container: '.offer__slider',\r\n        slide: '.offer__slide',\r\n        nextArrow: '.offer__slider-next',\r\n        prevArrow: '.offer__slider-prev',\r\n        totalCounter: '#total',\r\n        currentCounter: '#current',\r\n        wrapper: '.offer__slider-wrapper',\r\n        field: '.offer__slider-inner'\r\n    });\r\n\r\n\r\n    timer('.timer', '2022-06-11');\r\n\r\n});"],"names":[],"sourceRoot":""}
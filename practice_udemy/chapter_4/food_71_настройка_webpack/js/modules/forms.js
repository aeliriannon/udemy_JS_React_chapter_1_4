function forms() {
    // Отпаравука данных на сервер Forms

    const form = document.querySelectorAll('form'); //берем все формы с нашего сайта
    const message = { //создаем объект с ответами на нашу олтправку формы
        loading: 'icons/spinner.svg', //пока идет заргрузка формы
        success: 'Спасибо! Скоро мы с Вами свяжемся!', //при удачной отправке формы
        failure: 'Что-то пошло не так...' //при ошибке загрузки
    };

    form.forEach(item => { //перебираем наши формы
        bindPostData(item); //и вызываем отправку формы текущей на сервер

    });

    const postData = async (url, data) => { //создаем функцию, которая постит наши данные, как переменные вводим адрес запроса и данные, которые будут поститься
        //с помощью async мы говорим, что внутри функции будет асинхронный код
        //async - прописывается перед  функцией в которой будет какой-то асинхронный код
        //а await - перед кодом, которого необходимо дождаться, перед тем как дальше выполнять функцию
        let res = await fetch(url, {
            method: 'POST', //метод отправки POST- запрос
            headers: { //прописываем заголовки
                'Content-type': 'application/json'
            },
            body: data //и как тело отправки указываем наш объект formData 
        }); //получаем promise который нам возвращает fetch

        return await res.json(); //возвращаем промис в виде json
    };

    function bindPostData(form) { //Функция которая будет отправлять данные на сервер, как аргумент выступает форма для отправки
        form.addEventListener('submit', (e) => { //навешиваем на форму обработчик события сабмит, оно срабатывает при попытке отправить форму
            //событие отправик срабатывает либо при нажатии клавиши Enter, либо при клике на поле у которого стоит type='submit'
            e.preventDefault(); //отменяекм стандартное поведение браузера(перезагрузку страницы при отправке формы)

            const statusMessage = document.createElement('img'); //создаем новый элекмент на страницек для показа спинера при загрузке
            statusMessage.src = message.loading; //добавляем к картинке аттрибут src в котором будет прописан путь к картинке со спинером
            //прописываем инлайн-стили для нашей картинки со спинером
            statusMessage.style.cssText = `
                    display: block;
                    margin: 0 auto;
                `;
            // form.append(statusMessage); //добавляем этот элемент-сообщение в нашу форму

            form.insertAdjacentElement('afterend', statusMessage); //добавляем наш спинер в структуру штмл, первый аттрибут указывает куда вставляем(после формы)
            //второй аттрибут что вставляем(наш спинер)

            //---!! УСТАРЕВШИЙ  способ отправки запросов на сервер

            // const request = new XMLHttpRequest(); //создаем объект запроса с помощью конструктора XMLHttpRequest
            // request.open('POST', 'server.php'); //открывавем запрос(вводим данные по запросу: тип запроса и путь на который мы будем ссылаться)
            // request.setRequestHeader('Content-type', 'application/json'); //создаем заголовки запроса, что нам будет приходить


            const formData = new FormData(form); //формируем новый объект, с помощью конструктора formData который возьмет все данные пользователя из формы
            //как аргумент передаем ту форму из которой нам нужно собрать данные

            // const object = {}; //создаем пустой объект, в который будут записываться данные из массива FormData

            // formData.forEach(function (value, key) { //перебираем массив formData и передаем в функцию аргументы - значените и ключ, для формирования объекта
            //     object[key] = value; //берем наш объект и говорим, что ключ(индекс элекмента) объекта равен значению
            // });

            const json = JSON.stringify(Object.fromEntries(formData.entries())); //превразщаем полученые данные в массив массивов, а потом обратно в объект, а затем в json


            // const json = JSON.stringify(object); //конвертируем наш полученный объект в json формат

            // request.send(json); //отправляем нашу объект, который мы сформировали с помощью json, на сервер

            //---!! СОВРЕМЕННЫЙ  способ отправки запросов на сервер


            postData('http://localhost:3000/requests', json)
                .then(data => { //получаем с сервера какие то данные
                    console.log(data); // выводим ответ на наш запрос
                    showThanksModal(message.success); //вызываем функцию показа сообщений, в котором говорим, что все прошло успешно
                    statusMessage.remove(); //и удаляем спинер со странички
                })
                .catch(() => { //при ошибки отправки запроса
                    // при fetch не сработает c ошибкой в пути, так как получит все равно после запроса true с той только разницей, что в статусе будет false
                    //сработает только с системными ошибками(например отстутствие интернета)
                    showThanksModal(message.failure); //при неудачной загрузке вызываем функцию показа сообщений, в котором говорим, что все прошло плохо
                })
                .finally(() => { //выполняем при любом исходе запроса очистку формы
                    form.reset(); //чистим данные формы, которые ввели
                });

            // request.addEventListener('load', () => { //на нашу отправку вешаем обработчик события и отслеживаем полную загрузку формы
            //     if (request.status === 200) { //проверяем что статус отправки положительный, все хорошо
            //         console.log(request.response); // выводим ответ на наш запрос
            //         showThanksModal(message.success); //вызываем функцию показа сообщений, в котором говорим, что все прошло успешно
            //         form.reset(); //чистим данные формы, которые ввели
            //         statusMessage.remove(); //и удаляем спинер со странички
            //     } else {
            //         showThanksModal(message.failure); //при неудачной загрузке вызываем функцию показа сообщений, в котором говорим, что все прошло плохо
            //     }
            // });
        });
    }

    //---Наводим красоту ---

    function showThanksModal(message) { //создаем функцию, которая выводит(заменяет) модальное окно с сообщением для пользователя
        const prevModalDialog = document.querySelector('.modal__dialog'); //получаем наше модальное окно с сайта

        prevModalDialog.classList.add('hide'); // добавляем rjyntyne мод. окнf c формой класс hide, который скроет его от пользователя до того как его откроют
        openModal(); //далее открываем модальное окно 

        const thanksModal = document.createElement('div'); //Zсоздаем новый элемент для модального окна с сообщениями для клиента
        thanksModal.classList.add('modal__dialog'); //добавляем новому элементу класс modal-dialog чтобы подтянулись стили для обертки контентной части модального окна
        //далее в наш блок кладем html-структуру
        thanksModal.innerHTML = `
                <div class="modal__content">
                    <div data-close class="modal__close">&times;</div>
                    <div class="modal__title">${message}</div>
                </div>
    
            `;

        document.querySelector('.modal').append(thanksModal); //берем элемент модал и добавляем в него наш новый элемент modal-dialog
        setTimeout(() => { //устанавливаем таймер, который будет убирать сообщение и опять показывать форму
            thanksModal.remove(); //убираем сообщение
            prevModalDialog.classList.add('show'); //добавляем класс showи показываем обратно окно с формой
            prevModalDialog.classList.remove('hide'); //убираем класс hide
            closeModal(); //и закрываем модальное окно полностью
        }, 4000); //через 4 секунды
    }

    // //---!! API - интерфейс какого-то программного обеспечения, либо приложения !!---
    // //---!! набор каких то инструментов и возможностей, которое нам дает какое то уже готовое решение !!---
    // //---!! DOM API - это различные методы, которые дают нам возможность работать с элементами на странице !!---
    // //---!! FECH API - встроеные в браузер инструмент, который позволяет общаться с сервером с помощью promise !!---

}

module.exports = forms;
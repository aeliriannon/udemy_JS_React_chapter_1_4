'use strict';

//Функция-конструктор, с ее помощью мы мож

function User(name, id) { //создаем функцию, которая принимает два аргумента имя и идентификатор
    //говорим, что у каждого пользователя будет свое имя и id, которое он введет при регистрации
    this.name = name; //записываем данные аргумента name в свойство name будущего объекта
    this.id = id; //записываем данные аргумента id в свойство id будущего объекта
    this.human = true; //записываем свойство human со значением true, проверка пользователя, что он человек
    this.hello = function() { //также можем прописывать сюда методы, для будущего объекта
        console.log(`Hello ${this.name}`); //выводим в консоль приветствие с именем этого конкретного юзера
    };
}

User.prototype.exit = function() { //с помощбю prototype можем добавлять дополнительные свойства и методы к нашему конструктороу объектов, они применятся ко всем объектам созданным после него
    console.log(`Пользователь ${this.name} ушел`); //
};

const ira = new User('Ira', 34); //создаем ОБЪЕКТ для конкретного нового юзера с помощью функции-конструктора User, и передаем в аргументы имя и возраст
const alex = new User('Alex', 25);

ira.hello(); //вызываем метод hello для юзера Ира

console.log(ira);
//Получим в консоли два ОБЪЕКТА user со свойствами имени, айди и хьюман, и значениями введенными аргументы
//Пример:
// User {
//     name: 'Ira',
//     id: 34,
//     human: true
// }

//---ES6 создание объектов с помощью классов(классы появились как синтаксический сахар в жаваскрипте, чтобы сделать код красивее)


